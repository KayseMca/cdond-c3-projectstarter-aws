version: 2.1


orbs: 
  slack: circleci/slack@4.10.1

commands:


  destroy-environment:
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}
             aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
             aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}
  notify_slack_error:
    steps:
      - slack/notify:
          channel: circlci-deploying-to-aws
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          channel: circlci-deploying-to-aws
          event: pass
          template: basic_success_1
jobs:
  frontend-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - notify_slack_error
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  backend-build:  
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - notify_slack_error
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  backend-test: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run: 
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
  frontend-test: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run: 
          name: test backend
          command: |
            cd frontend
            npm install
            npm run test
    
  # scanning package vulnerabilities
  scan-frontend:  
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [scan-frontend]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:  
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [scan-backend]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run: 
          name: Ensure back-end infrastructure exists.
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run: 
          name: Ensure front-end infrastructure exists.
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              echo ${CIRCLE_WORKFLOW_ID:0:5}
              cat .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure 
      # - destroy-environment
  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["49:b2:26:92:55:38:57:4a:a1:1d:b9:32:9d:17:14:51"]
      - run:
          name: Install ssh
          command: |
              apk add --update openssh
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/files
            cat inventory.txt
            ansible-playbook  -i inventory.txt  configure-server.yml
      - destroy-environment
      # attach workspace
      - attach_workspace:
          at: ~/
#       # Here's where you will add some code to rollback on failure   
workflows:
  default:
    jobs:
      - frontend-build
      - backend-build
      - frontend-test:
          requires: [frontend-build]
      - backend-test:
          requires: [backend-build]
      - scan-frontend: 
          requires: [frontend-build]
      - scan-backend:
          requires: [backend-build]
      - deploy-infrastructure:
          requires: [frontend-test, backend-test, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
