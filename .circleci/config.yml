version: 2.1


orbs: 
  slack: circleci/slack@4.10.1

commands:


  destroy-environment:
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}
             aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
             aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}
  notify_slack_error:
    steps:
      - slack/notify:
          channel: circlci-deploying-to-aws
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          channel: circlci-deploying-to-aws
          event: pass
          template: basic_success_1
jobs:
  frontend-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - notify_slack_error
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  backend-build:  
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - notify_slack_error
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  backend-test: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run: 
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
  frontend-test: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run: 
          name: test backend
          command: |
            cd frontend
            npm install
            npm run test
    
  # scanning package vulnerabilities
  scan-frontend:  
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [scan-frontend]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:  
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [scan-backend]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run: 
          name: Ensure back-end infrastructure exists.
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run: 
          name: Ensure front-end infrastructure exists.
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              echo ${CIRCLE_WORKFLOW_ID:0:5}
              cat .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure 
      # - destroy-environment
  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["49:b2:26:92:55:38:57:4a:a1:1d:b9:32:9d:17:14:51"]
      - run:
          name: Install ssh
          command: |
              apk add --update openssh
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook  -i inventory.txt  configure-server.yml
      - destroy-environment
      # attach workspace
      - attach_workspace:
          at: ~/
#       # Here's where you will add some code to rollback on failure   

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              # Run and save the migration output
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io 
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  id=${CIRCLE_WORKFLOW_ID:0:5}
                  # If you are using kvdb.io, generate the bucket ID "DJpvi6gWw4Ukh2z98ugsLZ" in your local terminal first
                  curl https://kvdb.io/DJpvi6gWw4Ukh2z98ugsLZ/migration_${id}  -d '1'
              fi
#      # Here's where you will add some code to rollback on failure 

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install Node.js 13.8.0
          command: |
            yum install -y nodejs
            npm install --global n
            n 13.8.0

      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip
      
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive

      - destroy-environment
      # revert migration fail
  #       # Here's where you will add some code to rollback on failure   

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["49:b2:26:92:55:38:57:4a:a1:1d:b9:32:9d:17:14:51"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install ssh
          command: |
              sudo apt-get install openssh-server
              sudo service ssh start
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install  
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible
        
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            yum install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            npm install --global n
            n 13.8.0
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            # configure the environment
            echo NODE_ENV=deployment >> .env 
            echo VERSION=1 >> .env 
            echo TYPEORM_ENTITIES=${TYPEORM_ENTITIES} >> .env 
            echo TYPEORM_HOST=${TYPEORM_HOST} >> .env 
            echo TYPEORM_CONNECTION=${TYPEORM_CONNECTION} >> .env  
            echo TYPEORM_PORT=${TYPEORM_PORT} >> .env 
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> .env 
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> .env 
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> .env 
            echo TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS} >> .env 
            echo TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} >> .env 
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment 
      # Here's where you will add some code to rollback on failure 

workflows:
  default:
    jobs:
      - frontend-build
      - backend-build
      - frontend-test:
          requires: [frontend-build]
      - backend-test:
          requires: [backend-build]
      - scan-frontend: 
          requires: [frontend-build]
      - scan-backend:
          requires: [backend-build]
      - deploy-infrastructure:
          requires: [frontend-test, backend-test, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
          context: slack_secrets
      
      - configure-infrastructure:
          requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
