version: 2.1


orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks
    parameters:
      WORKFLOW_ID:
        type: string
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WORKFLOW_ID >>
             aws s3 rm s3://udapeople-<< parameters.WORKFLOW_ID >> --recursive
             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.WORKFLOW_ID >>
      
  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string      
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                # Your Memstash or kvdb.io GET URL code goes here
                # Example: Memstash.io
                #SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
                # Example: kvdb.io
                SUCCESS=$(curl --insecure  https://kvdb.io/DJpvi6gWw4Ukh2z98ugsLZ/migration_<< parameters.workflow_id >>)
                # Logic for reverting the database state
                if (( $SUCCESS == 1 ));
                then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                fi  

  notify_slack_error:
    steps:
      - slack/notify:
          channel: circlci-deploying-to-aws
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          channel: circlci-deploying-to-aws
          event: pass
          template: basic_success_1
jobs:
  frontend-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - notify_slack_error
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  backend-build:  
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - notify_slack_error
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  backend-test: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run: 
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
  frontend-test: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run: 
          name: test backend
          command: |
            cd frontend
            npm install
            npm run test
    
  # scanning package vulnerabilities
  scan-frontend:  
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [scan-frontend]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:  
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [scan-backend]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run: 
          name: Ensure back-end infrastructure exists.
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run: 
          name: Ensure front-end infrastructure exists.
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              echo ${CIRCLE_WORKFLOW_ID:0:5}
              cat .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure 
      # - destroy-environment
  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["49:b2:26:92:55:38:57:4a:a1:1d:b9:32:9d:17:14:51"]
      - run:
          name: Install ssh
          command: |
              apk add --update openssh
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook  -i inventory.txt  configure-server.yml
      # - destroy-environment:  
      #     Workflow_ID: ${CIRCLE_WORKFLOW:0:5}
      # attach workspace
      - attach_workspace:
          at: ~/
#       # Here's where you will add some code to rollback on failure   

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              # Run and save the migration output
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io 
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  export id=${CIRCLE_WORKFLOW_ID:0:5}
                  cat id
                  # If you are using kvdb.io, generate the bucket ID "DJpvi6gWw4Ukh2z98ugsLZ" in your local terminal first
                  curl https://kvdb.io/DJpvi6gWw4Ukh2z98ugsLZ/migration_${id}  -d '1'
              fi
#      # Here's where you will add some code to rollback on failure 

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip

      - attach_workspace:
          at: /.circleci/ansible

      - run:
          name: Install Node.js 13.8.0
          command: |
            yum install -y sudo
            sudo curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
            # curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
            sudo yum  install -y nodejs
            npm install --global -y  n
            n 13.8.0

      
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive

      # - destroy-environment
      # revert migration fail
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install tar utility
          command: |
            apk add --update ansible gzip tar nodejs npm
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["49:b2:26:92:55:38:57:4a:a1:1d:b9:32:9d:17:14:51"]
      # attach workspace
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install ssh
      #     command: |
      #       sudo apt update
      #       sudo apt-get install openssh
      - run:
          name: Install dependencies
          command: |
            apk add --update openssh
            apk add --update ansible
            apk add --update nodejs
            apk add --update npm
            apk add curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      # - run: 
      #     name: Install ansible, awscli & node
      #     command: |
      #       # awscli
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install

      #       # ansible
      #       sudo apt update
      #       sudo apt install software-properties-common -y
      #       sudo add-apt-repository --yes --update ppa:ansible/ansible
      #       sudo apt install ansible -y

      #       curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
      #       sudo apt install -y nodejs
      #       sudo npm install --global n
      #       sudo n 13.8.0 
      # - run:
      #     name: Install dependencies
      #     command: |
      #       sudo apt install -y tar gzip
      # - run:
      #     name: Install Ansible
      #     command: |
      #       python3 -m pip install --user ansible
        
      # - run:
      #     name: Install Node.js 13.8.0
      #     command: |
      #       # Install Node.js LTS version as our base Node.js version
      #       curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
      #       yum install -y nodejs
      #       # Use n version manager to use Node.js v13.8.0
      #       npm install --global n
      #       n 13.8.0
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            # configure the environment
            # echo NODE_ENV=deployment >> .env 
            # echo VERSION=1 >> .env 
            # echo TYPEORM_ENTITIES=${TYPEORM_ENTITIES} >> .env 
            # echo TYPEORM_HOST=${TYPEORM_HOST} >> .env 
            # echo TYPEORM_CONNECTION=${TYPEORM_CONNECTION} >> .env  
            # echo TYPEORM_PORT=${TYPEORM_PORT} >> .env 
            # echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> .env 
            # echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> .env 
            # echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> .env 
            # echo TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS} >> .env 
            # echo TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} >> .env
            echo "Contents  of the .env file is -------"
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            # mkdir -p .circle/ansible/roles/deploy/files
            # cp artifact.tar.gz .circle/ansible/roles/deploy/files

            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.js
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
            # --ssh-common-args='-o StrictHostKeyChecking=no'

      # - destroy-environment:
      #     Workflow_ID:${CIRCLE_WORKFLOW_ID:0:5}
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs
            apk add --update npm
            apk add curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --output text)
            export API_URL=http://${BACKEND_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            WEBSITE_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
            echo ${WEBSITE_URL}
            if curl -s ${WEBSITE_URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}
  
  cloudfront-update:
    docker:
      # Lightweight Docker image 
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:5}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}

# Workfow

workflows:
  default:
    jobs:
      - frontend-build
      - backend-build
      - frontend-test:
          requires: [frontend-build]
      - backend-test:
          requires: [backend-build]
      - scan-frontend: 
          requires: [frontend-build]
      - scan-backend:
          requires: [backend-build]
      - deploy-infrastructure:
          requires: [frontend-test, backend-test, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
          context: slack_secrets
      
      - configure-infrastructure:
          requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [run-migrations]
      - smoke-test: 
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [smoke-test, cloudfront-update]
